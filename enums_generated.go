// Code generated by "enumer -output enums_generated.go -type TLSmode enums.go"; DO NOT EDIT.

package main

import (
	"fmt"
	"strings"
)

const _TLSmodeName = "TLSStartTLSNoTLS"

var _TLSmodeIndex = [...]uint8{0, 3, 11, 16}

const _TLSmodeLowerName = "tlsstarttlsnotls"

func (i TLSmode) String() string {
	if i >= TLSmode(len(_TLSmodeIndex)-1) {
		return fmt.Sprintf("TLSmode(%d)", i)
	}
	return _TLSmodeName[_TLSmodeIndex[i]:_TLSmodeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TLSmodeNoOp() {
	var x [1]struct{}
	_ = x[TLS-(0)]
	_ = x[StartTLS-(1)]
	_ = x[NoTLS-(2)]
}

var _TLSmodeValues = []TLSmode{TLS, StartTLS, NoTLS}

var _TLSmodeNameToValueMap = map[string]TLSmode{
	_TLSmodeName[0:3]:        TLS,
	_TLSmodeLowerName[0:3]:   TLS,
	_TLSmodeName[3:11]:       StartTLS,
	_TLSmodeLowerName[3:11]:  StartTLS,
	_TLSmodeName[11:16]:      NoTLS,
	_TLSmodeLowerName[11:16]: NoTLS,
}

var _TLSmodeNames = []string{
	_TLSmodeName[0:3],
	_TLSmodeName[3:11],
	_TLSmodeName[11:16],
}

// TLSmodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TLSmodeString(s string) (TLSmode, error) {
	if val, ok := _TLSmodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TLSmodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TLSmode values", s)
}

// TLSmodeValues returns all values of the enum
func TLSmodeValues() []TLSmode {
	return _TLSmodeValues
}

// TLSmodeStrings returns a slice of all String values of the enum
func TLSmodeStrings() []string {
	strs := make([]string, len(_TLSmodeNames))
	copy(strs, _TLSmodeNames)
	return strs
}

// IsATLSmode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TLSmode) IsATLSmode() bool {
	for _, v := range _TLSmodeValues {
		if i == v {
			return true
		}
	}
	return false
}
